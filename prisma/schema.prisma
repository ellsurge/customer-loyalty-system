// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String     @id @default(cuid())
    sessionToken String     @unique
    userId       String
    expires      DateTime
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    points        Int       @default(0)
    Role          Role      @default(USER)
    gift          Gift[]
    transactions   Transactions[]
    staff           Staff[]
    dateJoined      DateTime @default(now())
    password        String
    shipping        Shipping[] 

}
model Shipping{
    id              String      @id @default(cuid())
    country         String
    province        String
    address         String
    user            User        @relation( fields: [userId], references: [id])
    userId          String

}


model Item {
    id              String    @id @default(cuid())
    name            String?
    price           Int
    gift            Gift[]
    transaction     Transactions[]
    category        Category    @relation(fields: [catId], references: [id])
    catId           String


}
model Category{
    id            String    @id @default(cuid())
    name          String 
    point         Int?
    items         Item[]


}
model Currency {
    id            Int       @id @default(autoincrement())
    name          String 
    points        Float
}
model Gift {
    id              String  @id @default(cuid())
    item            Item    @relation(fields: [itemId],references: [id])
    itemId          String
    user            User    @relation(fields: [userId], references: [id])
    userId          String
}
model Transactions {
    id              String  @id @default(cuid())
    user            User    @relation(fields: [userId], references: [id])
    userId          String
    item            Item  @relation(fields: [itemId], references: [id])
    itemId          String
    cashier         Staff    @relation(fields: [cashierId], references: [id])
    cashierId       String
    quantity        Int
    total           Int     
    doc             DateTime @default(now())
    status          Status @default(PENDING)
}
model Staff{
    id              String      @id @default(cuid())
    user            User      @relation(fields: [userId], references: [id])  
    userId          String   
    Tranaction      Transactions[]


}
model VerificationToken {
    identifier    String
    token         String   @unique
    expires       DateTime

    @@unique([identifier, token])
}

enum Role {
    USER
    ADMIN
    CASHIER
}
enum Status{
    PENDING
    SUCCESS
    CANCELED

}